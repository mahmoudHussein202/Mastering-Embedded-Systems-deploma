
Drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001008  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001138  08001138  00011138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001164  08001164  0001116c  2**0
                  CONTENTS
  4 .ARM          00000000  08001164  08001164  0001116c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001164  0800116c  0001116c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001164  08001164  00011164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001168  08001168  00011168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001116c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000524  20000000  0800116c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  0800116c  00020524  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001116c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005abd  00000000  00000000  00011195  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f9e  00000000  00000000  00016c52  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000011a4  00000000  00000000  00017bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002e8  00000000  00000000  00018d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000270  00000000  00000000  00019080  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002ad9  00000000  00000000  000192f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000321f  00000000  00000000  0001bdc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00011bf4  00000000  00000000  0001efe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00030bdc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000970  00000000  00000000  00030c58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001120 	.word	0x08001120

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001120 	.word	0x08001120

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	6039      	str	r1, [r7, #0]
 800018e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000194:	2b00      	cmp	r3, #0
 8000196:	db0a      	blt.n	80001ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	b2da      	uxtb	r2, r3
 800019c:	490c      	ldr	r1, [pc, #48]	; (80001d0 <__NVIC_SetPriority+0x4c>)
 800019e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a2:	0152      	lsls	r2, r2, #5
 80001a4:	b2d2      	uxtb	r2, r2
 80001a6:	440b      	add	r3, r1
 80001a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ac:	e00a      	b.n	80001c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4908      	ldr	r1, [pc, #32]	; (80001d4 <__NVIC_SetPriority+0x50>)
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	f003 030f 	and.w	r3, r3, #15
 80001ba:	3b04      	subs	r3, #4
 80001bc:	0152      	lsls	r2, r2, #5
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	440b      	add	r3, r1
 80001c2:	761a      	strb	r2, [r3, #24]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	e000e100 	.word	0xe000e100
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3b01      	subs	r3, #1
 80001e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001e8:	d301      	bcc.n	80001ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001ea:	2301      	movs	r3, #1
 80001ec:	e00f      	b.n	800020e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <SysTick_Config+0x40>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001f6:	2107      	movs	r1, #7
 80001f8:	f04f 30ff 	mov.w	r0, #4294967295
 80001fc:	f7ff ffc2 	bl	8000184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <SysTick_Config+0x40>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <SysTick_Config+0x40>)
 8000208:	2207      	movs	r2, #7
 800020a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	e000e010 	.word	0xe000e010

0800021c <HardFault_Handler>:
#include "CortexMX_OS_Porting.h"

unsigned char SysTickLED;

void HardFault_Handler(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	while(1);
 8000220:	e7fe      	b.n	8000220 <HardFault_Handler+0x4>

08000222 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
 8000222:	b480      	push	{r7}
 8000224:	af00      	add	r7, sp, #0
	while(1);
 8000226:	e7fe      	b.n	8000226 <MemManage_Handler+0x4>

08000228 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	while(1);
 800022c:	e7fe      	b.n	800022c <BusFault_Handler+0x4>

0800022e <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0
	while(1);
 8000232:	e7fe      	b.n	8000232 <UsageFault_Handler+0x4>

08000234 <SVC_Handler>:
}

__attribute ((naked)) void SVC_Handler()
{
	__asm("tst lr,#4  \n\t"
 8000234:	f01e 0f04 	tst.w	lr, #4
 8000238:	bf0c      	ite	eq
 800023a:	f3ef 8008 	mrseq	r0, MSP
 800023e:	f3ef 8009 	mrsne	r0, PSP
 8000242:	f000 bb9d 	b.w	8000980 <OS_SVC>
			"ITE EQ \n\t"
			"mrseq r0,MSP \n\t"
			"mrsne r0,PSP \n\t"
			"B OS_SVC");
}
 8000246:	bf00      	nop

08000248 <HW_init>:


void HW_init()
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	// X count -> 1 ms
	// X = 8000 count

	//decrease PendSV interrupt priority to be smaller than or equal SysTick Timer
	//SysTick have a priority 14
	__NVIC_SetPriority(PendSV_IRQn, 15);
 800024c:	210f      	movs	r1, #15
 800024e:	f06f 0001 	mvn.w	r0, #1
 8000252:	f7ff ff97 	bl	8000184 <__NVIC_SetPriority>

}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <Trigger_OS_PendSV>:

void Trigger_OS_PendSV()
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <Trigger_OS_PendSV+0x18>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	4a03      	ldr	r2, [pc, #12]	; (8000274 <Trigger_OS_PendSV+0x18>)
 8000266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800026a:	6053      	str	r3, [r2, #4]

}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	e000ed00 	.word	0xe000ed00

08000278 <Start_Ticker>:

void Start_Ticker()
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	//This clock tree should be defined in HW_init()
	// 8 MHZ
	// 1 count -> 0.125 us
	// X count -> 1 ms =====> X = 8000 count
	SysTick_Config(8000);
 800027c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000280:	f7ff ffaa 	bl	80001d8 <SysTick_Config>

}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}

08000288 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	SysTickLED ^= 1;
 800028c:	4b07      	ldr	r3, [pc, #28]	; (80002ac <SysTick_Handler+0x24>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	f083 0301 	eor.w	r3, r3, #1
 8000294:	b2da      	uxtb	r2, r3
 8000296:	4b05      	ldr	r3, [pc, #20]	; (80002ac <SysTick_Handler+0x24>)
 8000298:	701a      	strb	r2, [r3, #0]
	MYRTOS_Update_TaskWaitingTime();
 800029a:	f000 fc13 	bl	8000ac4 <MYRTOS_Update_TaskWaitingTime>
	//determine Pcurrent & Pnext
	Decide_whatNext();
 800029e:	f000 fb1d 	bl	80008dc <Decide_whatNext>
	//switch Context & restore
	Trigger_OS_PendSV();
 80002a2:	f7ff ffdb 	bl	800025c <Trigger_OS_PendSV>
}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20000030 	.word	0x20000030

080002b0 <FIFO_init>:
 */

#include "MYRTOS_FIFO.h"

Buffer_status FIFO_init (FIFO_Buf_t* fifo, element_type* buff , unsigned int length)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	60b9      	str	r1, [r7, #8]
 80002ba:	607a      	str	r2, [r7, #4]
	if(!buff)
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d101      	bne.n	80002c6 <FIFO_init+0x16>
		return FIFO_NULL;
 80002c2:	2303      	movs	r3, #3
 80002c4:	e011      	b.n	80002ea <FIFO_init+0x3a>

	fifo->base = buff;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	68ba      	ldr	r2, [r7, #8]
 80002ca:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	68da      	ldr	r2, [r3, #12]
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base;
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	68da      	ldr	r2, [r3, #12]
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	611a      	str	r2, [r3, #16]
	fifo->counter = 0;
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 80002e8:	2300      	movs	r3, #0
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	3714      	adds	r7, #20
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr

080002f4 <FIFO_enqueue>:

Buffer_status FIFO_enqueue (FIFO_Buf_t* fifo, element_type item)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	6039      	str	r1, [r7, #0]
	// FIFO null
	if ( !fifo->base || !fifo->length )
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	68db      	ldr	r3, [r3, #12]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d003      	beq.n	800030e <FIFO_enqueue+0x1a>
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	691b      	ldr	r3, [r3, #16]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d101      	bne.n	8000312 <FIFO_enqueue+0x1e>
		return FIFO_NULL;
 800030e:	2303      	movs	r3, #3
 8000310:	e02d      	b.n	800036e <FIFO_enqueue+0x7a>

	// FIFO full
	if ((fifo->head == fifo->length) && (fifo->counter == fifo->length))
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	685b      	ldr	r3, [r3, #4]
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	6912      	ldr	r2, [r2, #16]
 800031a:	4293      	cmp	r3, r2
 800031c:	d107      	bne.n	800032e <FIFO_enqueue+0x3a>
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	691b      	ldr	r3, [r3, #16]
 8000326:	429a      	cmp	r2, r3
 8000328:	d101      	bne.n	800032e <FIFO_enqueue+0x3a>
		return FIFO_FULL;
 800032a:	2301      	movs	r3, #1
 800032c:	e01f      	b.n	800036e <FIFO_enqueue+0x7a>

	*(fifo->tail) = item;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	683a      	ldr	r2, [r7, #0]
 8000334:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	1c5a      	adds	r2, r3, #1
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]

	// for circular fifo enqueue
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->length)) -4 ))
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	68d2      	ldr	r2, [r2, #12]
 8000348:	4611      	mov	r1, r2
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	6912      	ldr	r2, [r2, #16]
 800034e:	0092      	lsls	r2, r2, #2
 8000350:	440a      	add	r2, r1
 8000352:	3a04      	subs	r2, #4
 8000354:	4293      	cmp	r3, r2
 8000356:	d104      	bne.n	8000362 <FIFO_enqueue+0x6e>
		fifo->tail = fifo->base;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	68da      	ldr	r2, [r3, #12]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	609a      	str	r2, [r3, #8]
 8000360:	e004      	b.n	800036c <FIFO_enqueue+0x78>
	else
		fifo->tail++;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	1d1a      	adds	r2, r3, #4
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR;
 800036c:	2300      	movs	r3, #0
}
 800036e:	4618      	mov	r0, r3
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr

08000378 <FIFO_dequeue>:


Buffer_status FIFO_dequeue (FIFO_Buf_t* fifo, element_type* item)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	6039      	str	r1, [r7, #0]
	// FIFO null
	if ( !fifo->base || !fifo->length )
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	68db      	ldr	r3, [r3, #12]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d003      	beq.n	8000392 <FIFO_dequeue+0x1a>
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	691b      	ldr	r3, [r3, #16]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d101      	bne.n	8000396 <FIFO_dequeue+0x1e>
		return FIFO_NULL;
 8000392:	2303      	movs	r3, #3
 8000394:	e028      	b.n	80003e8 <FIFO_dequeue+0x70>

	// FIFO empty
	if ( fifo->head == fifo->tail )
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	685a      	ldr	r2, [r3, #4]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	689b      	ldr	r3, [r3, #8]
 800039e:	429a      	cmp	r2, r3
 80003a0:	d101      	bne.n	80003a6 <FIFO_dequeue+0x2e>
		return FIFO_EMPTY;
 80003a2:	2302      	movs	r3, #2
 80003a4:	e020      	b.n	80003e8 <FIFO_dequeue+0x70>

	*item = *(fifo->head);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	1e5a      	subs	r2, r3, #1
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	601a      	str	r2, [r3, #0]


	// for circular fifo dequeue
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->length)) -4 ))
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	68d2      	ldr	r2, [r2, #12]
 80003c2:	4611      	mov	r1, r2
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	6912      	ldr	r2, [r2, #16]
 80003c8:	0092      	lsls	r2, r2, #2
 80003ca:	440a      	add	r2, r1
 80003cc:	3a04      	subs	r2, #4
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d104      	bne.n	80003dc <FIFO_dequeue+0x64>
		fifo->head = fifo->base;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	68da      	ldr	r2, [r3, #12]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	e004      	b.n	80003e6 <FIFO_dequeue+0x6e>
	else
		fifo->head++;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	1d1a      	adds	r2, r3, #4
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 80003e6:	2300      	movs	r3, #0
}
 80003e8:	4618      	mov	r0, r3
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr
	...

080003f4 <PendSV_Handler>:
{
	//====================================
	//Save the Context of the Current Task
	//====================================
	//Get the Current Task "Current PSP from CPU register" as CPU Push XPSR,......,R0
	OS_Get_PSP(OS_Control.CurrentTask->Current_PSP);
 80003f4:	4b6c      	ldr	r3, [pc, #432]	; (80005a8 <PendSV_Handler+0x1b4>)
 80003f6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003fa:	f3ef 8009 	mrs	r0, PSP
 80003fe:	4602      	mov	r2, r0
 8000400:	619a      	str	r2, [r3, #24]

	///using this current_PSP (pointer) to store (R4 to R11)
	OS_Control.CurrentTask->Current_PSP--;
 8000402:	4b69      	ldr	r3, [pc, #420]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000404:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000408:	699a      	ldr	r2, [r3, #24]
 800040a:	3a04      	subs	r2, #4
 800040c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r4" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 800040e:	4b66      	ldr	r3, [pc, #408]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000410:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000414:	699b      	ldr	r3, [r3, #24]
 8000416:	4622      	mov	r2, r4
 8000418:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 800041a:	4b63      	ldr	r3, [pc, #396]	; (80005a8 <PendSV_Handler+0x1b4>)
 800041c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000420:	699a      	ldr	r2, [r3, #24]
 8000422:	3a04      	subs	r2, #4
 8000424:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r5" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000426:	4b60      	ldr	r3, [pc, #384]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000428:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	462a      	mov	r2, r5
 8000430:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000432:	4b5d      	ldr	r3, [pc, #372]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000434:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000438:	699a      	ldr	r2, [r3, #24]
 800043a:	3a04      	subs	r2, #4
 800043c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r6" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 800043e:	4b5a      	ldr	r3, [pc, #360]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000440:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	4632      	mov	r2, r6
 8000448:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 800044a:	4b57      	ldr	r3, [pc, #348]	; (80005a8 <PendSV_Handler+0x1b4>)
 800044c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000450:	699a      	ldr	r2, [r3, #24]
 8000452:	3a04      	subs	r2, #4
 8000454:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r7" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000456:	4b54      	ldr	r3, [pc, #336]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000458:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	463a      	mov	r2, r7
 8000460:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000462:	4b51      	ldr	r3, [pc, #324]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000464:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000468:	699a      	ldr	r2, [r3, #24]
 800046a:	3a04      	subs	r2, #4
 800046c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r8" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 800046e:	4b4e      	ldr	r3, [pc, #312]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000470:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	4642      	mov	r2, r8
 8000478:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 800047a:	4b4b      	ldr	r3, [pc, #300]	; (80005a8 <PendSV_Handler+0x1b4>)
 800047c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000480:	699a      	ldr	r2, [r3, #24]
 8000482:	3a04      	subs	r2, #4
 8000484:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r9" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000486:	4b48      	ldr	r3, [pc, #288]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000488:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	464a      	mov	r2, r9
 8000490:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000492:	4b45      	ldr	r3, [pc, #276]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000494:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000498:	699a      	ldr	r2, [r3, #24]
 800049a:	3a04      	subs	r2, #4
 800049c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r10" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 800049e:	4b42      	ldr	r3, [pc, #264]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	4652      	mov	r2, sl
 80004a8:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 80004aa:	4b3f      	ldr	r3, [pc, #252]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004b0:	699a      	ldr	r2, [r3, #24]
 80004b2:	3a04      	subs	r2, #4
 80004b4:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r11" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 80004b6:	4b3c      	ldr	r3, [pc, #240]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	465a      	mov	r2, fp
 80004c0:	601a      	str	r2, [r3, #0]


	//====================================
	//Save the Context of the Current Task
	//====================================
	OS_Control.CurrentTask = OS_Control.NextTask ;
 80004c2:	4b39      	ldr	r3, [pc, #228]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004c4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80004c8:	4a37      	ldr	r2, [pc, #220]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004ca:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
	OS_Control.NextTask = NULL;
 80004ce:	4b36      	ldr	r3, [pc, #216]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

	__asm volatile("mov r11,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 80004d6:	4b34      	ldr	r3, [pc, #208]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004d8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	469b      	mov	fp, r3
	OS_Control.CurrentTask->Current_PSP++;
 80004e2:	4b31      	ldr	r3, [pc, #196]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004e4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004e8:	699a      	ldr	r2, [r3, #24]
 80004ea:	3204      	adds	r2, #4
 80004ec:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r10,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 80004ee:	4b2e      	ldr	r3, [pc, #184]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004f0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	469a      	mov	sl, r3
	OS_Control.CurrentTask->Current_PSP++;
 80004fa:	4b2b      	ldr	r3, [pc, #172]	; (80005a8 <PendSV_Handler+0x1b4>)
 80004fc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000500:	699a      	ldr	r2, [r3, #24]
 8000502:	3204      	adds	r2, #4
 8000504:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r9,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000506:	4b28      	ldr	r3, [pc, #160]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000508:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4699      	mov	r9, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000512:	4b25      	ldr	r3, [pc, #148]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000514:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000518:	699a      	ldr	r2, [r3, #24]
 800051a:	3204      	adds	r2, #4
 800051c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r8,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 800051e:	4b22      	ldr	r3, [pc, #136]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000520:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4698      	mov	r8, r3
	OS_Control.CurrentTask->Current_PSP++;
 800052a:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <PendSV_Handler+0x1b4>)
 800052c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000530:	699a      	ldr	r2, [r3, #24]
 8000532:	3204      	adds	r2, #4
 8000534:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r7,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000536:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000538:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	461f      	mov	r7, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000542:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000544:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000548:	699a      	ldr	r2, [r3, #24]
 800054a:	3204      	adds	r2, #4
 800054c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r6,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 800054e:	4b16      	ldr	r3, [pc, #88]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000550:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	461e      	mov	r6, r3
	OS_Control.CurrentTask->Current_PSP++;
 800055a:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <PendSV_Handler+0x1b4>)
 800055c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000560:	699a      	ldr	r2, [r3, #24]
 8000562:	3204      	adds	r2, #4
 8000564:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r5,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000568:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	461d      	mov	r5, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000572:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000574:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000578:	699a      	ldr	r2, [r3, #24]
 800057a:	3204      	adds	r2, #4
 800057c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r4,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 800057e:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000580:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	461c      	mov	r4, r3
	OS_Control.CurrentTask->Current_PSP++;
 800058a:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <PendSV_Handler+0x1b4>)
 800058c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000590:	699a      	ldr	r2, [r3, #24]
 8000592:	3204      	adds	r2, #4
 8000594:	619a      	str	r2, [r3, #24]

	//update PSP and exit
	OS_Set_PSP(OS_Control.CurrentTask->Current_PSP);
 8000596:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <PendSV_Handler+0x1b4>)
 8000598:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	4618      	mov	r0, r3
 80005a0:	f380 8809 	msr	PSP, r0
	__asm volatile("BX LR");
 80005a4:	4770      	bx	lr

}
 80005a6:	bf00      	nop
 80005a8:	20000048 	.word	0x20000048

080005ac <MYRTOS_Idle_Task>:

void MYRTOS_Idle_Task()
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
	while (1)
	{
		IdleTaskLED ^= 1;
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <MYRTOS_Idle_Task+0x18>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	f083 0301 	eor.w	r3, r3, #1
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4b02      	ldr	r3, [pc, #8]	; (80005c4 <MYRTOS_Idle_Task+0x18>)
 80005bc:	701a      	strb	r2, [r3, #0]
		__asm("wfe");
 80005be:	bf20      	wfe
		IdleTaskLED ^= 1;
 80005c0:	e7f6      	b.n	80005b0 <MYRTOS_Idle_Task+0x4>
 80005c2:	bf00      	nop
 80005c4:	20000238 	.word	0x20000238

080005c8 <MYRTOS_Create_MainStack>:
	}
}


void MYRTOS_Create_MainStack()
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
	OS_Control._S_MSP_Task = &_estack;
 80005cc:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <MYRTOS_Create_MainStack+0x34>)
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MYRTOS_Create_MainStack+0x38>)
 80005d0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control._E_MSP_Task = OS_Control._S_MSP_Task - MainStackSize;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <MYRTOS_Create_MainStack+0x38>)
 80005d6:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80005da:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 80005de:	4a08      	ldr	r2, [pc, #32]	; (8000600 <MYRTOS_Create_MainStack+0x38>)
 80005e0:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	//Aligned 8 Bytes spaces between main task and PSP tasks
	OS_Control.PSP_Task_Locator = (OS_Control._E_MSP_Task - 8 );
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MYRTOS_Create_MainStack+0x38>)
 80005e6:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80005ea:	3b08      	subs	r3, #8
 80005ec:	4a04      	ldr	r2, [pc, #16]	; (8000600 <MYRTOS_Create_MainStack+0x38>)
 80005ee:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//if (_E_MSP_Task < &_eheap) Error:excedded the available stack size
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20002800 	.word	0x20002800
 8000600:	20000048 	.word	0x20000048

08000604 <MYRTOS_init>:



MYRTOS_errorID MYRTOS_init()
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
	MYRTOS_errorID error = NoError ;
 800060a:	2300      	movs	r3, #0
 800060c:	71fb      	strb	r3, [r7, #7]

	//Update OS Mode (OSsuspend)
	OS_Control.OSmodeID = OSsuspend;
 800060e:	4b16      	ldr	r3, [pc, #88]	; (8000668 <MYRTOS_init+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//Specify the Main Stack for OS
	MYRTOS_Create_MainStack();
 8000616:	f7ff ffd7 	bl	80005c8 <MYRTOS_Create_MainStack>

	//Create OS Ready Queue
	if (FIFO_init(&Ready_Queue, Ready_Queue_FIFO, 100) != FIFO_NO_ERROR)
 800061a:	2264      	movs	r2, #100	; 0x64
 800061c:	4913      	ldr	r1, [pc, #76]	; (800066c <MYRTOS_init+0x68>)
 800061e:	4814      	ldr	r0, [pc, #80]	; (8000670 <MYRTOS_init+0x6c>)
 8000620:	f7ff fe46 	bl	80002b0 <FIFO_init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d002      	beq.n	8000630 <MYRTOS_init+0x2c>
		error += Ready_Queue_init_error;
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	3301      	adds	r3, #1
 800062e:	71fb      	strb	r3, [r7, #7]

	//Configure IDLE Task
	strcpy (MYRTOS_idleTask.TaskName , "idleTask");
 8000630:	4b10      	ldr	r3, [pc, #64]	; (8000674 <MYRTOS_init+0x70>)
 8000632:	4a11      	ldr	r2, [pc, #68]	; (8000678 <MYRTOS_init+0x74>)
 8000634:	ca07      	ldmia	r2, {r0, r1, r2}
 8000636:	c303      	stmia	r3!, {r0, r1}
 8000638:	701a      	strb	r2, [r3, #0]
	MYRTOS_idleTask.priority = 255;
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <MYRTOS_init+0x78>)
 800063c:	22ff      	movs	r2, #255	; 0xff
 800063e:	711a      	strb	r2, [r3, #4]
	MYRTOS_idleTask.p_TaskEntry = MYRTOS_Idle_Task ;
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MYRTOS_init+0x78>)
 8000642:	4a0f      	ldr	r2, [pc, #60]	; (8000680 <MYRTOS_init+0x7c>)
 8000644:	609a      	str	r2, [r3, #8]
	MYRTOS_idleTask.Stack_Size = 300;
 8000646:	4b0d      	ldr	r3, [pc, #52]	; (800067c <MYRTOS_init+0x78>)
 8000648:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800064c:	601a      	str	r2, [r3, #0]

	error += MYRTOS_CreateTask(&MYRTOS_idleTask);
 800064e:	480b      	ldr	r0, [pc, #44]	; (800067c <MYRTOS_init+0x78>)
 8000650:	f000 f856 	bl	8000700 <MYRTOS_CreateTask>
 8000654:	4603      	mov	r3, r0
 8000656:	461a      	mov	r2, r3
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	4413      	add	r3, r2
 800065c:	71fb      	strb	r3, [r7, #7]




	return error ;
 800065e:	79fb      	ldrb	r3, [r7, #7]

}
 8000660:	4618      	mov	r0, r3
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000048 	.word	0x20000048
 800066c:	2000023c 	.word	0x2000023c
 8000670:	20000034 	.word	0x20000034
 8000674:	20000210 	.word	0x20000210
 8000678:	08001138 	.word	0x08001138
 800067c:	200001f4 	.word	0x200001f4
 8000680:	080005ad 	.word	0x080005ad

08000684 <MyRTOS_Create_Task_Stack>:


void MyRTOS_Create_Task_Stack(Task_ref* Tref)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	 * r12
	 * r4,r3,r2,r1,r0
	 * =====================
	 * r5,r6,r7,r8,r9,r11 (Saved/Restore) Manual
	 */
	Tref->Current_PSP = Tref->_S_PSP_Task ;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	691b      	ldr	r3, [r3, #16]
 8000690:	461a      	mov	r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	619a      	str	r2, [r3, #24]

	Tref->Current_PSP--;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	1f1a      	subs	r2, r3, #4
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = 0x01000000; // DUMMY_XPSR should T = 1 to avoid BUS fault
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006a8:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP--;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	1f1a      	subs	r2, r3, #4
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = (unsigned int)Tref->p_TaskEntry ; //PC
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	689a      	ldr	r2, [r3, #8]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP--; //LR = 0xFFFFFFFD (EXC_RETURN) Return to thread and PSP stack
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	1f1a      	subs	r2, r3, #4
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = 0xFFFFFFFD ;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f06f 0202 	mvn.w	r2, #2
 80006d0:	601a      	str	r2, [r3, #0]

	for (int j=0; j<13;j++)
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	e00b      	b.n	80006f0 <MyRTOS_Create_Task_Stack+0x6c>
	{
		Tref->Current_PSP--;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	1f1a      	subs	r2, r3, #4
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	619a      	str	r2, [r3, #24]
		*(Tref->Current_PSP) = 0;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
	for (int j=0; j<13;j++)
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	3301      	adds	r3, #1
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b0c      	cmp	r3, #12
 80006f4:	ddf0      	ble.n	80006d8 <MyRTOS_Create_Task_Stack+0x54>
	}


}
 80006f6:	bf00      	nop
 80006f8:	3714      	adds	r7, #20
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <MYRTOS_CreateTask>:




MYRTOS_errorID MYRTOS_CreateTask(Task_ref* Tref)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	MYRTOS_errorID error = NoError ;
 8000708:	2300      	movs	r3, #0
 800070a:	73fb      	strb	r3, [r7, #15]

	//Create its own PSP stack
	//Check task stack size exceeded the PSP stack
	Tref->_S_PSP_Task = OS_Control.PSP_Task_Locator;
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <MYRTOS_CreateTask+0x74>)
 800070e:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	611a      	str	r2, [r3, #16]
	Tref->_E_PSP_Task = Tref->_S_PSP_Task - Tref->Stack_Size;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	691a      	ldr	r2, [r3, #16]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	1ad2      	subs	r2, r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	615a      	str	r2, [r3, #20]
	//	- Task stack		-
	//	- _E_PSP_Task		-
	//	-					-
	//	- _eheap			-
	//	-					-
	if(Tref->_E_PSP_Task < (unsigned int) (&(_eheap)))
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	4a13      	ldr	r2, [pc, #76]	; (8000778 <MYRTOS_CreateTask+0x78>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d201      	bcs.n	8000732 <MYRTOS_CreateTask+0x32>
	{
		return Task_exceeded_StackSize;
 800072e:	2302      	movs	r3, #2
 8000730:	e01b      	b.n	800076a <MYRTOS_CreateTask+0x6a>
	}

	//Aligned 8 Bytes spaces between Task PSP and other
	OS_Control.PSP_Task_Locator = (Tref->_E_PSP_Task - 8 );
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	3b08      	subs	r3, #8
 8000738:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <MYRTOS_CreateTask+0x74>)
 800073a:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//Initialize PSP Task stack
	MyRTOS_Create_Task_Stack(Tref);
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f7ff ffa0 	bl	8000684 <MyRTOS_Create_Task_Stack>

	//update sch Table
	OS_Control.OSTasks[OS_Control.NoOfActiveTasks] = Tref;
 8000744:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MYRTOS_CreateTask+0x74>)
 8000746:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800074a:	490a      	ldr	r1, [pc, #40]	; (8000774 <MYRTOS_CreateTask+0x74>)
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Control.NoOfActiveTasks++;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MYRTOS_CreateTask+0x74>)
 8000754:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000758:	3301      	adds	r3, #1
 800075a:	4a06      	ldr	r2, [pc, #24]	; (8000774 <MYRTOS_CreateTask+0x74>)
 800075c:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c

	//Task State Update -> Suspend
	Tref->TaskState = Suspend;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2200      	movs	r2, #0
 8000764:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	return error ;
 8000768:	7bfb      	ldrb	r3, [r7, #15]

}
 800076a:	4618      	mov	r0, r3
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000048 	.word	0x20000048
 8000778:	20000b28 	.word	0x20000b28

0800077c <bubblesort>:

//Handler Mode
void bubblesort()
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
	unsigned int i,j,n;
	Task_ref* temp;
	n = OS_Control.NoOfActiveTasks;
 8000782:	4b21      	ldr	r3, [pc, #132]	; (8000808 <bubblesort+0x8c>)
 8000784:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000788:	607b      	str	r3, [r7, #4]
	for (i=0 ; i<n-1 ; i++)
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	e030      	b.n	80007f2 <bubblesort+0x76>
		for (j=0 ; j<n-i-1 ; j++)
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	e023      	b.n	80007de <bubblesort+0x62>
			if(OS_Control.OSTasks[j]->priority > OS_Control.OSTasks[j+1]->priority)
 8000796:	4a1c      	ldr	r2, [pc, #112]	; (8000808 <bubblesort+0x8c>)
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800079e:	791a      	ldrb	r2, [r3, #4]
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	3301      	adds	r3, #1
 80007a4:	4918      	ldr	r1, [pc, #96]	; (8000808 <bubblesort+0x8c>)
 80007a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007aa:	791b      	ldrb	r3, [r3, #4]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d913      	bls.n	80007d8 <bubblesort+0x5c>
			{
				temp = OS_Control.OSTasks[j];
 80007b0:	4a15      	ldr	r2, [pc, #84]	; (8000808 <bubblesort+0x8c>)
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b8:	603b      	str	r3, [r7, #0]
				OS_Control.OSTasks[j] = OS_Control.OSTasks[j+1];
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	3301      	adds	r3, #1
 80007be:	4a12      	ldr	r2, [pc, #72]	; (8000808 <bubblesort+0x8c>)
 80007c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007c4:	4910      	ldr	r1, [pc, #64]	; (8000808 <bubblesort+0x8c>)
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.OSTasks[j+1] = temp;
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	3301      	adds	r3, #1
 80007d0:	490d      	ldr	r1, [pc, #52]	; (8000808 <bubblesort+0x8c>)
 80007d2:	683a      	ldr	r2, [r7, #0]
 80007d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (j=0 ; j<n-i-1 ; j++)
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	3301      	adds	r3, #1
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	1ad3      	subs	r3, r2, r3
 80007e4:	3b01      	subs	r3, #1
 80007e6:	68ba      	ldr	r2, [r7, #8]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d3d4      	bcc.n	8000796 <bubblesort+0x1a>
	for (i=0 ; i<n-1 ; i++)
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	3301      	adds	r3, #1
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	3b01      	subs	r3, #1
 80007f6:	68fa      	ldr	r2, [r7, #12]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d3c9      	bcc.n	8000790 <bubblesort+0x14>
			}
}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	20000048 	.word	0x20000048

0800080c <MYRTOS_Update_Scheduler_Table>:


//Handler Mode
void MYRTOS_Update_Scheduler_Table()
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
	Task_ref* temp = NULL;
 8000812:	2300      	movs	r3, #0
 8000814:	603b      	str	r3, [r7, #0]
	Task_ref* Ptask;
	Task_ref* PnextTask;
	int i =0;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]

	//1- bubble sort SchTable OS_Control-> OSTASKS[100] (priority high then low)
	bubblesort();
 800081a:	f7ff ffaf 	bl	800077c <bubblesort>

	//2- free ready queue
	while(FIFO_dequeue(&Ready_Queue, &temp) != FIFO_EMPTY);
 800081e:	bf00      	nop
 8000820:	463b      	mov	r3, r7
 8000822:	4619      	mov	r1, r3
 8000824:	482b      	ldr	r0, [pc, #172]	; (80008d4 <MYRTOS_Update_Scheduler_Table+0xc8>)
 8000826:	f7ff fda7 	bl	8000378 <FIFO_dequeue>
 800082a:	4603      	mov	r3, r0
 800082c:	2b02      	cmp	r3, #2
 800082e:	d1f7      	bne.n	8000820 <MYRTOS_Update_Scheduler_Table+0x14>

	//3- update ready queue
	while(i < OS_Control.NoOfActiveTasks)
 8000830:	e044      	b.n	80008bc <MYRTOS_Update_Scheduler_Table+0xb0>
	{
		Ptask = OS_Control.OSTasks[i];
 8000832:	4a29      	ldr	r2, [pc, #164]	; (80008d8 <MYRTOS_Update_Scheduler_Table+0xcc>)
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800083a:	60bb      	str	r3, [r7, #8]
		PnextTask = OS_Control.OSTasks[i+1];
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	3301      	adds	r3, #1
 8000840:	4a25      	ldr	r2, [pc, #148]	; (80008d8 <MYRTOS_Update_Scheduler_Table+0xcc>)
 8000842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000846:	607b      	str	r3, [r7, #4]
		if(Ptask->TaskState != Suspend)
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800084e:	2b00      	cmp	r3, #0
 8000850:	d031      	beq.n	80008b6 <MYRTOS_Update_Scheduler_Table+0xaa>
		{
			//in case we reached to the end of available OSTASKS
			if(PnextTask->TaskState == Suspend)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000858:	2b00      	cmp	r3, #0
 800085a:	d108      	bne.n	800086e <MYRTOS_Update_Scheduler_Table+0x62>
			{
				FIFO_enqueue(&Ready_Queue, Ptask);
 800085c:	68b9      	ldr	r1, [r7, #8]
 800085e:	481d      	ldr	r0, [pc, #116]	; (80008d4 <MYRTOS_Update_Scheduler_Table+0xc8>)
 8000860:	f7ff fd48 	bl	80002f4 <FIFO_enqueue>
				Ptask->TaskState = ready;
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	2203      	movs	r2, #3
 8000868:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 800086c:	e02e      	b.n	80008cc <MYRTOS_Update_Scheduler_Table+0xc0>
			}
			//if the Ptask priority > next task then (lowest number is meaning higher priority)
			if(Ptask->priority < PnextTask->priority)
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	791a      	ldrb	r2, [r3, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	791b      	ldrb	r3, [r3, #4]
 8000876:	429a      	cmp	r2, r3
 8000878:	d208      	bcs.n	800088c <MYRTOS_Update_Scheduler_Table+0x80>
			{
				FIFO_enqueue(&Ready_Queue, Ptask);
 800087a:	68b9      	ldr	r1, [r7, #8]
 800087c:	4815      	ldr	r0, [pc, #84]	; (80008d4 <MYRTOS_Update_Scheduler_Table+0xc8>)
 800087e:	f7ff fd39 	bl	80002f4 <FIFO_enqueue>
				Ptask->TaskState = ready;
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	2203      	movs	r2, #3
 8000886:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 800088a:	e01f      	b.n	80008cc <MYRTOS_Update_Scheduler_Table+0xc0>
			}else if(Ptask->priority == PnextTask->priority)
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	791a      	ldrb	r2, [r3, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	791b      	ldrb	r3, [r3, #4]
 8000894:	429a      	cmp	r2, r3
 8000896:	d108      	bne.n	80008aa <MYRTOS_Update_Scheduler_Table+0x9e>
			{
				//if the Ptask priority == next task then push Ptask to ready state
				//make the Ptask = next task and nexttask++
				FIFO_enqueue(&Ready_Queue, Ptask);
 8000898:	68b9      	ldr	r1, [r7, #8]
 800089a:	480e      	ldr	r0, [pc, #56]	; (80008d4 <MYRTOS_Update_Scheduler_Table+0xc8>)
 800089c:	f7ff fd2a 	bl	80002f4 <FIFO_enqueue>
				Ptask->TaskState = ready;
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	2203      	movs	r2, #3
 80008a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80008a8:	e005      	b.n	80008b6 <MYRTOS_Update_Scheduler_Table+0xaa>
			}else if (Ptask->priority > PnextTask->priority)
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	791a      	ldrb	r2, [r3, #4]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	791b      	ldrb	r3, [r3, #4]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d809      	bhi.n	80008ca <MYRTOS_Update_Scheduler_Table+0xbe>
				//not allowed to happen as we already reordered it by bubble sort
				break;
			}

		}
		i++;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	3301      	adds	r3, #1
 80008ba:	60fb      	str	r3, [r7, #12]
	while(i < OS_Control.NoOfActiveTasks)
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MYRTOS_Update_Scheduler_Table+0xcc>)
 80008be:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d8b4      	bhi.n	8000832 <MYRTOS_Update_Scheduler_Table+0x26>
	}


}
 80008c8:	e000      	b.n	80008cc <MYRTOS_Update_Scheduler_Table+0xc0>
				break;
 80008ca:	bf00      	nop
}
 80008cc:	bf00      	nop
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000034 	.word	0x20000034
 80008d8:	20000048 	.word	0x20000048

080008dc <Decide_whatNext>:


//Handler Mode
void Decide_whatNext()
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	//if ready queue is empty && OS_Control->CurrentTask != suspend
	if(Ready_Queue.counter == 0 && OS_Control.CurrentTask->TaskState != Suspend)
 80008e0:	4b24      	ldr	r3, [pc, #144]	; (8000974 <Decide_whatNext+0x98>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d11a      	bne.n	800091e <Decide_whatNext+0x42>
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <Decide_whatNext+0x9c>)
 80008ea:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008ee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d013      	beq.n	800091e <Decide_whatNext+0x42>
	{
		OS_Control.CurrentTask->TaskState = Running;
 80008f6:	4b20      	ldr	r3, [pc, #128]	; (8000978 <Decide_whatNext+0x9c>)
 80008f8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008fc:	2201      	movs	r2, #1
 80008fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		//add the current task again (round robin)
		FIFO_enqueue(&Ready_Queue, OS_Control.CurrentTask);
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <Decide_whatNext+0x9c>)
 8000904:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000908:	4619      	mov	r1, r3
 800090a:	481a      	ldr	r0, [pc, #104]	; (8000974 <Decide_whatNext+0x98>)
 800090c:	f7ff fcf2 	bl	80002f4 <FIFO_enqueue>
		OS_Control.NextTask = OS_Control.CurrentTask;
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <Decide_whatNext+0x9c>)
 8000912:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000916:	4a18      	ldr	r2, [pc, #96]	; (8000978 <Decide_whatNext+0x9c>)
 8000918:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
			FIFO_enqueue(&Ready_Queue, OS_Control.CurrentTask);
			OS_Control.CurrentTask->TaskState = ready;
		}
	}

}
 800091c:	e027      	b.n	800096e <Decide_whatNext+0x92>
		FIFO_dequeue(&Ready_Queue, &OS_Control.NextTask);
 800091e:	4917      	ldr	r1, [pc, #92]	; (800097c <Decide_whatNext+0xa0>)
 8000920:	4814      	ldr	r0, [pc, #80]	; (8000974 <Decide_whatNext+0x98>)
 8000922:	f7ff fd29 	bl	8000378 <FIFO_dequeue>
		OS_Control.NextTask->TaskState = Running;
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <Decide_whatNext+0x9c>)
 8000928:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800092c:	2201      	movs	r2, #1
 800092e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		if((OS_Control.CurrentTask->priority == OS_Control.NextTask->priority) && (OS_Control.CurrentTask->TaskState != Suspend))
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <Decide_whatNext+0x9c>)
 8000934:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000938:	791a      	ldrb	r2, [r3, #4]
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <Decide_whatNext+0x9c>)
 800093c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000940:	791b      	ldrb	r3, [r3, #4]
 8000942:	429a      	cmp	r2, r3
 8000944:	d113      	bne.n	800096e <Decide_whatNext+0x92>
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <Decide_whatNext+0x9c>)
 8000948:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800094c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000950:	2b00      	cmp	r3, #0
 8000952:	d00c      	beq.n	800096e <Decide_whatNext+0x92>
			FIFO_enqueue(&Ready_Queue, OS_Control.CurrentTask);
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <Decide_whatNext+0x9c>)
 8000956:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <Decide_whatNext+0x98>)
 800095e:	f7ff fcc9 	bl	80002f4 <FIFO_enqueue>
			OS_Control.CurrentTask->TaskState = ready;
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <Decide_whatNext+0x9c>)
 8000964:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000968:	2203      	movs	r2, #3
 800096a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000034 	.word	0x20000034
 8000978:	20000048 	.word	0x20000048
 800097c:	200001ec 	.word	0x200001ec

08000980 <OS_SVC>:



//Handler Mode
void OS_SVC(int* StackFramePointer)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	//r0,r1,r2,r3,r12,LR,PC,XPSR
	unsigned char SVC_Number;
	SVC_Number = *((unsigned char*)(((unsigned char*)StackFramePointer[6])-2)) ;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3318      	adds	r3, #24
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	3b02      	subs	r3, #2
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	73fb      	strb	r3, [r7, #15]

	switch (SVC_Number)
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	2b00      	cmp	r3, #0
 8000998:	db1f      	blt.n	80009da <OS_SVC+0x5a>
 800099a:	2b01      	cmp	r3, #1
 800099c:	dd02      	ble.n	80009a4 <OS_SVC+0x24>
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d017      	beq.n	80009d2 <OS_SVC+0x52>
		MYRTOS_Update_Scheduler_Table();
		break;

	}

}
 80009a2:	e01a      	b.n	80009da <OS_SVC+0x5a>
		MYRTOS_Update_Scheduler_Table();
 80009a4:	f7ff ff32 	bl	800080c <MYRTOS_Update_Scheduler_Table>
		if(OS_Control.OSmodeID == OSrunning)
 80009a8:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <OS_SVC+0x64>)
 80009aa:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d112      	bne.n	80009d8 <OS_SVC+0x58>
			if(strcmp(OS_Control.CurrentTask->TaskName, "idleTask") !=0)
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <OS_SVC+0x64>)
 80009b4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009b8:	331c      	adds	r3, #28
 80009ba:	490b      	ldr	r1, [pc, #44]	; (80009e8 <OS_SVC+0x68>)
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fbd7 	bl	8000170 <strcmp>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d007      	beq.n	80009d8 <OS_SVC+0x58>
				Decide_whatNext();
 80009c8:	f7ff ff88 	bl	80008dc <Decide_whatNext>
				Trigger_OS_PendSV();
 80009cc:	f7ff fc46 	bl	800025c <Trigger_OS_PendSV>
		break;
 80009d0:	e002      	b.n	80009d8 <OS_SVC+0x58>
		MYRTOS_Update_Scheduler_Table();
 80009d2:	f7ff ff1b 	bl	800080c <MYRTOS_Update_Scheduler_Table>
		break;
 80009d6:	e000      	b.n	80009da <OS_SVC+0x5a>
		break;
 80009d8:	bf00      	nop
}
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000048 	.word	0x20000048
 80009e8:	08001138 	.word	0x08001138

080009ec <MYRTOS_OS_SVC_Set>:

//Thread Mode
void MYRTOS_OS_SVC_Set(SVC_ID id)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
	switch (id)
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d006      	beq.n	8000a0a <MYRTOS_OS_SVC_Set+0x1e>
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d006      	beq.n	8000a0e <MYRTOS_OS_SVC_Set+0x22>
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d000      	beq.n	8000a06 <MYRTOS_OS_SVC_Set+0x1a>
	case SVC_TaskWaitingTime:
		__asm("svc #0x02");
		break;
	}

}
 8000a04:	e005      	b.n	8000a12 <MYRTOS_OS_SVC_Set+0x26>
		__asm("svc #0x00");
 8000a06:	df00      	svc	0
		break;
 8000a08:	e003      	b.n	8000a12 <MYRTOS_OS_SVC_Set+0x26>
		__asm("svc #0x01");
 8000a0a:	df01      	svc	1
		break;
 8000a0c:	e001      	b.n	8000a12 <MYRTOS_OS_SVC_Set+0x26>
		__asm("svc #0x02");
 8000a0e:	df02      	svc	2
		break;
 8000a10:	bf00      	nop
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <MYRTOS_ActivateTask>:

void MYRTOS_ActivateTask(Task_ref* Tref)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	Tref->TaskState = Waiting;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2202      	movs	r2, #2
 8000a28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	MYRTOS_OS_SVC_Set(SVC_ActivateTask);
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f7ff ffdd 	bl	80009ec <MYRTOS_OS_SVC_Set>

}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <MYRTOS_TaskWait>:
	Tref->TaskState = Suspend;
	MYRTOS_OS_SVC_Set(SVC_TerminateTask);
}

void MYRTOS_TaskWait(unsigned int NoTicks, Task_ref* SelfTref)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
 8000a42:	6039      	str	r1, [r7, #0]
	SelfTref->TimeWaiting.Blocking = enable;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	2200      	movs	r2, #0
 8000a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	SelfTref->TimeWaiting.Ticks_Count = NoTicks;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	641a      	str	r2, [r3, #64]	; 0x40
	//Task should be blocked
	SelfTref->TaskState = Suspend;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	2200      	movs	r2, #0
 8000a56:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	// to be suspended immediately
	MYRTOS_OS_SVC_Set(SVC_TerminateTask);
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f7ff ffc6 	bl	80009ec <MYRTOS_OS_SVC_Set>


}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <MYRTOS_StartOS>:


void MYRTOS_StartOS()
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	OS_Control.OSmodeID = OSrunning;
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <MYRTOS_StartOS+0x54>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//set default "Current Task = Idle Task"
	OS_Control.CurrentTask = &MYRTOS_idleTask;
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <MYRTOS_StartOS+0x54>)
 8000a76:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <MYRTOS_StartOS+0x58>)
 8000a78:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	//Activate Idle Task
	MYRTOS_ActivateTask(&MYRTOS_idleTask);
 8000a7c:	4810      	ldr	r0, [pc, #64]	; (8000ac0 <MYRTOS_StartOS+0x58>)
 8000a7e:	f7ff ffcd 	bl	8000a1c <MYRTOS_ActivateTask>
	//Start Ticker
	Start_Ticker(); // 1ms
 8000a82:	f7ff fbf9 	bl	8000278 <Start_Ticker>

	OS_Set_PSP(OS_Control.CurrentTask->Current_PSP);
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <MYRTOS_StartOS+0x54>)
 8000a88:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f380 8809 	msr	PSP, r0
	// Switch Thread mode from MSP to PSP (Unprivileged)
	OS_Switch_SP_to_PSP;
 8000a94:	f3ef 8014 	mrs	r0, CONTROL
 8000a98:	f04f 0102 	mov.w	r1, #2
 8000a9c:	ea40 0001 	orr.w	r0, r0, r1
 8000aa0:	f380 8814 	msr	CONTROL, r0
	OS_Switch_UnPrivileged;
 8000aa4:	f3ef 8314 	mrs	r3, CONTROL
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	f383 8814 	msr	CONTROL, r3
	MYRTOS_idleTask.p_TaskEntry();
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <MYRTOS_StartOS+0x58>)
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	4798      	blx	r3
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000048 	.word	0x20000048
 8000ac0:	200001f4 	.word	0x200001f4

08000ac4 <MYRTOS_Update_TaskWaitingTime>:

void MYRTOS_Update_TaskWaitingTime()
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
	for(int i=0; i< OS_Control.NoOfActiveTasks ; i++)
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	e031      	b.n	8000b34 <MYRTOS_Update_TaskWaitingTime+0x70>
	{
		if(OS_Control.OSTasks[i]->TaskState == Suspend) // its blocking untill meet the timeline
 8000ad0:	4a1d      	ldr	r2, [pc, #116]	; (8000b48 <MYRTOS_Update_TaskWaitingTime+0x84>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d126      	bne.n	8000b2e <MYRTOS_Update_TaskWaitingTime+0x6a>
		{
			if(OS_Control.OSTasks[i]->TimeWaiting.Blocking == enable)
 8000ae0:	4a19      	ldr	r2, [pc, #100]	; (8000b48 <MYRTOS_Update_TaskWaitingTime+0x84>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d11e      	bne.n	8000b2e <MYRTOS_Update_TaskWaitingTime+0x6a>
			{
				OS_Control.OSTasks[i]->TimeWaiting.Ticks_Count--;
 8000af0:	4a15      	ldr	r2, [pc, #84]	; (8000b48 <MYRTOS_Update_TaskWaitingTime+0x84>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000afa:	3a01      	subs	r2, #1
 8000afc:	641a      	str	r2, [r3, #64]	; 0x40
				if(OS_Control.OSTasks[i]->TimeWaiting.Ticks_Count == 0)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <MYRTOS_Update_TaskWaitingTime+0x84>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d110      	bne.n	8000b2e <MYRTOS_Update_TaskWaitingTime+0x6a>
				{
					OS_Control.OSTasks[i]->TimeWaiting.Blocking = disable;
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <MYRTOS_Update_TaskWaitingTime+0x84>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b14:	2201      	movs	r2, #1
 8000b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					OS_Control.OSTasks[i]->TaskState = Waiting;
 8000b1a:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <MYRTOS_Update_TaskWaitingTime+0x84>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b22:	2202      	movs	r2, #2
 8000b24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
					MYRTOS_OS_SVC_Set(SVC_TaskWaitingTime);
 8000b28:	2002      	movs	r0, #2
 8000b2a:	f7ff ff5f 	bl	80009ec <MYRTOS_OS_SVC_Set>
	for(int i=0; i< OS_Control.NoOfActiveTasks ; i++)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3301      	adds	r3, #1
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <MYRTOS_Update_TaskWaitingTime+0x84>)
 8000b36:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d8c7      	bhi.n	8000ad0 <MYRTOS_Update_TaskWaitingTime+0xc>
				}
			}
		}
	}

}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000048 	.word	0x20000048

08000b4c <task1>:

Task_ref Task1,Task2,Task3,Task4;
unsigned char Task1LED,Task2LED,Task3LED,Task4LED;

void task1()
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	static int Count = 0;
	while (1)
	{
		//Task 1 code
		Task1LED ^= 1;
 8000b50:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <task1+0x3c>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	f083 0301 	eor.w	r3, r3, #1
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <task1+0x3c>)
 8000b5c:	701a      	strb	r2, [r3, #0]
		Count++;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <task1+0x40>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	3301      	adds	r3, #1
 8000b64:	4a09      	ldr	r2, [pc, #36]	; (8000b8c <task1+0x40>)
 8000b66:	6013      	str	r3, [r2, #0]
		if(Count == 30)
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <task1+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b1e      	cmp	r3, #30
 8000b6e:	d105      	bne.n	8000b7c <task1+0x30>
		{
			MYRTOS_ActivateTask(&Task4);
 8000b70:	4807      	ldr	r0, [pc, #28]	; (8000b90 <task1+0x44>)
 8000b72:	f7ff ff53 	bl	8000a1c <MYRTOS_ActivateTask>
			Count = 0;
 8000b76:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <task1+0x40>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
		}
		//100 ms
		MYRTOS_TaskWait(100, &Task1);
 8000b7c:	4905      	ldr	r1, [pc, #20]	; (8000b94 <task1+0x48>)
 8000b7e:	2064      	movs	r0, #100	; 0x64
 8000b80:	f7ff ff5b 	bl	8000a3a <MYRTOS_TaskWait>
		Task1LED ^= 1;
 8000b84:	e7e4      	b.n	8000b50 <task1+0x4>
 8000b86:	bf00      	nop
 8000b88:	2000049c 	.word	0x2000049c
 8000b8c:	2000001c 	.word	0x2000001c
 8000b90:	200003cc 	.word	0x200003cc
 8000b94:	20000410 	.word	0x20000410

08000b98 <task2>:
	}
}

void task2()
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	while (1)
	{
		//Task 2 code
		Task2LED ^= 1;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <task2+0x20>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	f083 0301 	eor.w	r3, r3, #1
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <task2+0x20>)
 8000ba8:	701a      	strb	r2, [r3, #0]
		//300 ms
		MYRTOS_TaskWait(300, &Task2);
 8000baa:	4904      	ldr	r1, [pc, #16]	; (8000bbc <task2+0x24>)
 8000bac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000bb0:	f7ff ff43 	bl	8000a3a <MYRTOS_TaskWait>
		Task2LED ^= 1;
 8000bb4:	e7f2      	b.n	8000b9c <task2+0x4>
 8000bb6:	bf00      	nop
 8000bb8:	20000455 	.word	0x20000455
 8000bbc:	200004a0 	.word	0x200004a0

08000bc0 <task3>:
	}
}

void task3()
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	while (1)
	{
		//Task 3 code
		Task3LED ^= 1;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <task3+0x20>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	f083 0301 	eor.w	r3, r3, #1
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <task3+0x20>)
 8000bd0:	701a      	strb	r2, [r3, #0]
		//500 ms
		MYRTOS_TaskWait(500, &Task3);
 8000bd2:	4904      	ldr	r1, [pc, #16]	; (8000be4 <task3+0x24>)
 8000bd4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bd8:	f7ff ff2f 	bl	8000a3a <MYRTOS_TaskWait>
		Task3LED ^= 1;
 8000bdc:	e7f2      	b.n	8000bc4 <task3+0x4>
 8000bde:	bf00      	nop
 8000be0:	20000520 	.word	0x20000520
 8000be4:	20000458 	.word	0x20000458

08000be8 <task4>:
	}
}

void task4()
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	static int Count = 0;
	while (1)
	{
		//Task 4 code
		Task4LED ^= 1;
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <task4+0x28>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	f083 0301 	eor.w	r3, r3, #1
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <task4+0x28>)
 8000bf8:	701a      	strb	r2, [r3, #0]
		Count++;
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <task4+0x2c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <task4+0x2c>)
 8000c02:	6013      	str	r3, [r2, #0]
		MYRTOS_TaskWait(1000, &Task4);
 8000c04:	4904      	ldr	r1, [pc, #16]	; (8000c18 <task4+0x30>)
 8000c06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c0a:	f7ff ff16 	bl	8000a3a <MYRTOS_TaskWait>
		Task4LED ^= 1;
 8000c0e:	e7ed      	b.n	8000bec <task4+0x4>
 8000c10:	20000454 	.word	0x20000454
 8000c14:	20000020 	.word	0x20000020
 8000c18:	200003cc 	.word	0x200003cc

08000c1c <main>:
	}
}

int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
	MYRTOS_errorID error = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	71fb      	strb	r3, [r7, #7]
	//HW_init (initialize clock Tree, Reset controller)
	HW_init();
 8000c26:	f7ff fb0f 	bl	8000248 <HW_init>

	if ( MYRTOS_init() != NoError )
 8000c2a:	f7ff fceb 	bl	8000604 <MYRTOS_init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d000      	beq.n	8000c36 <main+0x1a>
		while (1);
 8000c34:	e7fe      	b.n	8000c34 <main+0x18>

	Task1.Stack_Size = 768;
 8000c36:	4b3e      	ldr	r3, [pc, #248]	; (8000d30 <main+0x114>)
 8000c38:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c3c:	601a      	str	r2, [r3, #0]
	Task1.p_TaskEntry = task1;
 8000c3e:	4b3c      	ldr	r3, [pc, #240]	; (8000d30 <main+0x114>)
 8000c40:	4a3c      	ldr	r2, [pc, #240]	; (8000d34 <main+0x118>)
 8000c42:	609a      	str	r2, [r3, #8]
	Task1.priority = 3;
 8000c44:	4b3a      	ldr	r3, [pc, #232]	; (8000d30 <main+0x114>)
 8000c46:	2203      	movs	r2, #3
 8000c48:	711a      	strb	r2, [r3, #4]
	strcpy(Task1.TaskName , "task_1");
 8000c4a:	4b3b      	ldr	r3, [pc, #236]	; (8000d38 <main+0x11c>)
 8000c4c:	4a3b      	ldr	r2, [pc, #236]	; (8000d3c <main+0x120>)
 8000c4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c52:	6018      	str	r0, [r3, #0]
 8000c54:	3304      	adds	r3, #4
 8000c56:	8019      	strh	r1, [r3, #0]
 8000c58:	3302      	adds	r3, #2
 8000c5a:	0c0a      	lsrs	r2, r1, #16
 8000c5c:	701a      	strb	r2, [r3, #0]

	Task2.Stack_Size = 768;
 8000c5e:	4b38      	ldr	r3, [pc, #224]	; (8000d40 <main+0x124>)
 8000c60:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c64:	601a      	str	r2, [r3, #0]
	Task2.p_TaskEntry = task2;
 8000c66:	4b36      	ldr	r3, [pc, #216]	; (8000d40 <main+0x124>)
 8000c68:	4a36      	ldr	r2, [pc, #216]	; (8000d44 <main+0x128>)
 8000c6a:	609a      	str	r2, [r3, #8]
	Task2.priority = 3;
 8000c6c:	4b34      	ldr	r3, [pc, #208]	; (8000d40 <main+0x124>)
 8000c6e:	2203      	movs	r2, #3
 8000c70:	711a      	strb	r2, [r3, #4]
	strcpy(Task2.TaskName , "task_2");
 8000c72:	4b35      	ldr	r3, [pc, #212]	; (8000d48 <main+0x12c>)
 8000c74:	4a35      	ldr	r2, [pc, #212]	; (8000d4c <main+0x130>)
 8000c76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c7a:	6018      	str	r0, [r3, #0]
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	8019      	strh	r1, [r3, #0]
 8000c80:	3302      	adds	r3, #2
 8000c82:	0c0a      	lsrs	r2, r1, #16
 8000c84:	701a      	strb	r2, [r3, #0]

	Task3.Stack_Size = 768;
 8000c86:	4b32      	ldr	r3, [pc, #200]	; (8000d50 <main+0x134>)
 8000c88:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c8c:	601a      	str	r2, [r3, #0]
	Task3.p_TaskEntry = task3;
 8000c8e:	4b30      	ldr	r3, [pc, #192]	; (8000d50 <main+0x134>)
 8000c90:	4a30      	ldr	r2, [pc, #192]	; (8000d54 <main+0x138>)
 8000c92:	609a      	str	r2, [r3, #8]
	Task3.priority = 3;
 8000c94:	4b2e      	ldr	r3, [pc, #184]	; (8000d50 <main+0x134>)
 8000c96:	2203      	movs	r2, #3
 8000c98:	711a      	strb	r2, [r3, #4]
	strcpy(Task3.TaskName , "task_3");
 8000c9a:	4b2f      	ldr	r3, [pc, #188]	; (8000d58 <main+0x13c>)
 8000c9c:	4a2f      	ldr	r2, [pc, #188]	; (8000d5c <main+0x140>)
 8000c9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ca2:	6018      	str	r0, [r3, #0]
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	8019      	strh	r1, [r3, #0]
 8000ca8:	3302      	adds	r3, #2
 8000caa:	0c0a      	lsrs	r2, r1, #16
 8000cac:	701a      	strb	r2, [r3, #0]


	Task4.Stack_Size = 768;
 8000cae:	4b2c      	ldr	r3, [pc, #176]	; (8000d60 <main+0x144>)
 8000cb0:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cb4:	601a      	str	r2, [r3, #0]
	Task4.p_TaskEntry = task4;
 8000cb6:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <main+0x144>)
 8000cb8:	4a2a      	ldr	r2, [pc, #168]	; (8000d64 <main+0x148>)
 8000cba:	609a      	str	r2, [r3, #8]
	Task4.priority = 1;
 8000cbc:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <main+0x144>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	711a      	strb	r2, [r3, #4]
	strcpy(Task4.TaskName , "task_4");
 8000cc2:	4b29      	ldr	r3, [pc, #164]	; (8000d68 <main+0x14c>)
 8000cc4:	4a29      	ldr	r2, [pc, #164]	; (8000d6c <main+0x150>)
 8000cc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cca:	6018      	str	r0, [r3, #0]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	8019      	strh	r1, [r3, #0]
 8000cd0:	3302      	adds	r3, #2
 8000cd2:	0c0a      	lsrs	r2, r1, #16
 8000cd4:	701a      	strb	r2, [r3, #0]

	error += MYRTOS_CreateTask(&Task1);
 8000cd6:	4816      	ldr	r0, [pc, #88]	; (8000d30 <main+0x114>)
 8000cd8:	f7ff fd12 	bl	8000700 <MYRTOS_CreateTask>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	461a      	mov	r2, r3
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_CreateTask(&Task2);
 8000ce6:	4816      	ldr	r0, [pc, #88]	; (8000d40 <main+0x124>)
 8000ce8:	f7ff fd0a 	bl	8000700 <MYRTOS_CreateTask>
 8000cec:	4603      	mov	r3, r0
 8000cee:	461a      	mov	r2, r3
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_CreateTask(&Task3);
 8000cf6:	4816      	ldr	r0, [pc, #88]	; (8000d50 <main+0x134>)
 8000cf8:	f7ff fd02 	bl	8000700 <MYRTOS_CreateTask>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	461a      	mov	r2, r3
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	4413      	add	r3, r2
 8000d04:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_CreateTask(&Task4);
 8000d06:	4816      	ldr	r0, [pc, #88]	; (8000d60 <main+0x144>)
 8000d08:	f7ff fcfa 	bl	8000700 <MYRTOS_CreateTask>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	461a      	mov	r2, r3
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	4413      	add	r3, r2
 8000d14:	71fb      	strb	r3, [r7, #7]


	MYRTOS_ActivateTask(&Task1);
 8000d16:	4806      	ldr	r0, [pc, #24]	; (8000d30 <main+0x114>)
 8000d18:	f7ff fe80 	bl	8000a1c <MYRTOS_ActivateTask>
	MYRTOS_ActivateTask(&Task2);
 8000d1c:	4808      	ldr	r0, [pc, #32]	; (8000d40 <main+0x124>)
 8000d1e:	f7ff fe7d 	bl	8000a1c <MYRTOS_ActivateTask>
	MYRTOS_ActivateTask(&Task3);
 8000d22:	480b      	ldr	r0, [pc, #44]	; (8000d50 <main+0x134>)
 8000d24:	f7ff fe7a 	bl	8000a1c <MYRTOS_ActivateTask>

	MYRTOS_StartOS();
 8000d28:	f7ff fe9e 	bl	8000a68 <MYRTOS_StartOS>

	while(1)
 8000d2c:	e7fe      	b.n	8000d2c <main+0x110>
 8000d2e:	bf00      	nop
 8000d30:	20000410 	.word	0x20000410
 8000d34:	08000b4d 	.word	0x08000b4d
 8000d38:	2000042c 	.word	0x2000042c
 8000d3c:	08001144 	.word	0x08001144
 8000d40:	200004a0 	.word	0x200004a0
 8000d44:	08000b99 	.word	0x08000b99
 8000d48:	200004bc 	.word	0x200004bc
 8000d4c:	0800114c 	.word	0x0800114c
 8000d50:	20000458 	.word	0x20000458
 8000d54:	08000bc1 	.word	0x08000bc1
 8000d58:	20000474 	.word	0x20000474
 8000d5c:	08001154 	.word	0x08001154
 8000d60:	200003cc 	.word	0x200003cc
 8000d64:	08000be9 	.word	0x08000be9
 8000d68:	200003e8 	.word	0x200003e8
 8000d6c:	0800115c 	.word	0x0800115c

08000d70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d70:	480d      	ldr	r0, [pc, #52]	; (8000da8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d72:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d74:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <LoopForever+0x6>)
  ldr r1, =_edata
 8000d7a:	490d      	ldr	r1, [pc, #52]	; (8000db0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <LoopForever+0xe>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d80:	e002      	b.n	8000d88 <LoopCopyDataInit>

08000d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d86:	3304      	adds	r3, #4

08000d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d8c:	d3f9      	bcc.n	8000d82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d90:	4c0a      	ldr	r4, [pc, #40]	; (8000dbc <LoopForever+0x16>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d94:	e001      	b.n	8000d9a <LoopFillZerobss>

08000d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d98:	3204      	adds	r2, #4

08000d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d9c:	d3fb      	bcc.n	8000d96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d9e:	f000 f99b 	bl	80010d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000da2:	f7ff ff3b 	bl	8000c1c <main>

08000da6 <LoopForever>:

LoopForever:
    b LoopForever
 8000da6:	e7fe      	b.n	8000da6 <LoopForever>
  ldr   r0, =_estack
 8000da8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000db4:	0800116c 	.word	0x0800116c
  ldr r2, =_sbss
 8000db8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000dbc:	20000524 	.word	0x20000524

08000dc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dc0:	e7fe      	b.n	8000dc0 <ADC1_2_IRQHandler>
	...

08000dc4 <EXTI0_IRQHandler>:
 * 										ISR Functions
 * =============================================================================================
 */

void EXTI0_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	//Clear by writing '1' into the bit Pending register {EXTI_PR}
	EXTI->PR |= 1<<0;
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <EXTI0_IRQHandler+0x1c>)
 8000dca:	695b      	ldr	r3, [r3, #20]
 8000dcc:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <EXTI0_IRQHandler+0x1c>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[0]();
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <EXTI0_IRQHandler+0x20>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4798      	blx	r3
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40010400 	.word	0x40010400
 8000de4:	200004e4 	.word	0x200004e4

08000de8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <EXTI1_IRQHandler+0x1c>)
 8000dee:	695b      	ldr	r3, [r3, #20]
 8000df0:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <EXTI1_IRQHandler+0x1c>)
 8000df2:	f043 0302 	orr.w	r3, r3, #2
 8000df6:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[1]();
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <EXTI1_IRQHandler+0x20>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	4798      	blx	r3
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40010400 	.word	0x40010400
 8000e08:	200004e4 	.word	0x200004e4

08000e0c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <EXTI2_IRQHandler+0x1c>)
 8000e12:	695b      	ldr	r3, [r3, #20]
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <EXTI2_IRQHandler+0x1c>)
 8000e16:	f043 0304 	orr.w	r3, r3, #4
 8000e1a:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[2]();
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <EXTI2_IRQHandler+0x20>)
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	4798      	blx	r3
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40010400 	.word	0x40010400
 8000e2c:	200004e4 	.word	0x200004e4

08000e30 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <EXTI3_IRQHandler+0x1c>)
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <EXTI3_IRQHandler+0x1c>)
 8000e3a:	f043 0308 	orr.w	r3, r3, #8
 8000e3e:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[3]();
 8000e40:	4b03      	ldr	r3, [pc, #12]	; (8000e50 <EXTI3_IRQHandler+0x20>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	4798      	blx	r3
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40010400 	.word	0x40010400
 8000e50:	200004e4 	.word	0x200004e4

08000e54 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <EXTI4_IRQHandler+0x1c>)
 8000e5a:	695b      	ldr	r3, [r3, #20]
 8000e5c:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <EXTI4_IRQHandler+0x1c>)
 8000e5e:	f043 0310 	orr.w	r3, r3, #16
 8000e62:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[4]();
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <EXTI4_IRQHandler+0x20>)
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	4798      	blx	r3
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40010400 	.word	0x40010400
 8000e74:	200004e4 	.word	0x200004e4

08000e78 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= 1<<5;	GP_IRQ_CallBack[5]();}
 8000e7c:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <EXTI9_5_IRQHandler+0xa0>)
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	f003 0320 	and.w	r3, r3, #32
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d008      	beq.n	8000e9a <EXTI9_5_IRQHandler+0x22>
 8000e88:	4b23      	ldr	r3, [pc, #140]	; (8000f18 <EXTI9_5_IRQHandler+0xa0>)
 8000e8a:	695b      	ldr	r3, [r3, #20]
 8000e8c:	4a22      	ldr	r2, [pc, #136]	; (8000f18 <EXTI9_5_IRQHandler+0xa0>)
 8000e8e:	f043 0320 	orr.w	r3, r3, #32
 8000e92:	6153      	str	r3, [r2, #20]
 8000e94:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <EXTI9_5_IRQHandler+0xa4>)
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= 1<<6;	GP_IRQ_CallBack[6]();}
 8000e9a:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <EXTI9_5_IRQHandler+0xa0>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d008      	beq.n	8000eb8 <EXTI9_5_IRQHandler+0x40>
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <EXTI9_5_IRQHandler+0xa0>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	4a1b      	ldr	r2, [pc, #108]	; (8000f18 <EXTI9_5_IRQHandler+0xa0>)
 8000eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eb0:	6153      	str	r3, [r2, #20]
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <EXTI9_5_IRQHandler+0xa4>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= 1<<7;	GP_IRQ_CallBack[7]();}
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <EXTI9_5_IRQHandler+0xa0>)
 8000eba:	695b      	ldr	r3, [r3, #20]
 8000ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d008      	beq.n	8000ed6 <EXTI9_5_IRQHandler+0x5e>
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <EXTI9_5_IRQHandler+0xa0>)
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	4a13      	ldr	r2, [pc, #76]	; (8000f18 <EXTI9_5_IRQHandler+0xa0>)
 8000eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ece:	6153      	str	r3, [r2, #20]
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <EXTI9_5_IRQHandler+0xa4>)
 8000ed2:	69db      	ldr	r3, [r3, #28]
 8000ed4:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= 1<<8;	GP_IRQ_CallBack[8]();}
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <EXTI9_5_IRQHandler+0xa0>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d008      	beq.n	8000ef4 <EXTI9_5_IRQHandler+0x7c>
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <EXTI9_5_IRQHandler+0xa0>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	4a0c      	ldr	r2, [pc, #48]	; (8000f18 <EXTI9_5_IRQHandler+0xa0>)
 8000ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eec:	6153      	str	r3, [r2, #20]
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <EXTI9_5_IRQHandler+0xa4>)
 8000ef0:	6a1b      	ldr	r3, [r3, #32]
 8000ef2:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= 1<<9;	GP_IRQ_CallBack[9]();}
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <EXTI9_5_IRQHandler+0xa0>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d008      	beq.n	8000f12 <EXTI9_5_IRQHandler+0x9a>
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <EXTI9_5_IRQHandler+0xa0>)
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <EXTI9_5_IRQHandler+0xa0>)
 8000f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f0a:	6153      	str	r3, [r2, #20]
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <EXTI9_5_IRQHandler+0xa4>)
 8000f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f10:	4798      	blx	r3
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40010400 	.word	0x40010400
 8000f1c:	200004e4 	.word	0x200004e4

08000f20 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler (void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= 1<<10;	GP_IRQ_CallBack[10]();}
 8000f24:	4b2d      	ldr	r3, [pc, #180]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d008      	beq.n	8000f42 <EXTI15_10_IRQHandler+0x22>
 8000f30:	4b2a      	ldr	r3, [pc, #168]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	4a29      	ldr	r2, [pc, #164]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000f36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f3a:	6153      	str	r3, [r2, #20]
 8000f3c:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <EXTI15_10_IRQHandler+0xc0>)
 8000f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f40:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= 1<<11;	GP_IRQ_CallBack[11]();}
 8000f42:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d008      	beq.n	8000f60 <EXTI15_10_IRQHandler+0x40>
 8000f4e:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	4a22      	ldr	r2, [pc, #136]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000f54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f58:	6153      	str	r3, [r2, #20]
 8000f5a:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <EXTI15_10_IRQHandler+0xc0>)
 8000f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5e:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= 1<<12;	GP_IRQ_CallBack[12]();}
 8000f60:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d008      	beq.n	8000f7e <EXTI15_10_IRQHandler+0x5e>
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000f6e:	695b      	ldr	r3, [r3, #20]
 8000f70:	4a1a      	ldr	r2, [pc, #104]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000f72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f76:	6153      	str	r3, [r2, #20]
 8000f78:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <EXTI15_10_IRQHandler+0xc0>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= 1<<13;	GP_IRQ_CallBack[13]();}
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d008      	beq.n	8000f9c <EXTI15_10_IRQHandler+0x7c>
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	4a13      	ldr	r2, [pc, #76]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000f90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f94:	6153      	str	r3, [r2, #20]
 8000f96:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <EXTI15_10_IRQHandler+0xc0>)
 8000f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f9a:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= 1<<14;	GP_IRQ_CallBack[14]();}
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d008      	beq.n	8000fba <EXTI15_10_IRQHandler+0x9a>
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000fae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb2:	6153      	str	r3, [r2, #20]
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <EXTI15_10_IRQHandler+0xc0>)
 8000fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fb8:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= 1<<15;	GP_IRQ_CallBack[15]();}
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d008      	beq.n	8000fd8 <EXTI15_10_IRQHandler+0xb8>
 8000fc6:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <EXTI15_10_IRQHandler+0xbc>)
 8000fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fd0:	6153      	str	r3, [r2, #20]
 8000fd2:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <EXTI15_10_IRQHandler+0xc0>)
 8000fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd6:	4798      	blx	r3
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40010400 	.word	0x40010400
 8000fe0:	200004e4 	.word	0x200004e4

08000fe4 <SPI1_IRQHandler>:
	 * ==========================================================================================
	 */


	void SPI1_IRQHandler (void)
	{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
		struct S_IRQ_SRC irq_src;

		irq_src.TXE = ( ( SPI1->SR & (1<<1) ) >>1 );
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <SPI1_IRQHandler+0x54>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	085b      	lsrs	r3, r3, #1
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	793b      	ldrb	r3, [r7, #4]
 8000ff8:	f362 0300 	bfi	r3, r2, #0, #1
 8000ffc:	713b      	strb	r3, [r7, #4]
		irq_src.RXNE = ( ( SPI1->SR & (1<<0) ) >>0 );
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <SPI1_IRQHandler+0x54>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	b2da      	uxtb	r2, r3
 8001008:	793b      	ldrb	r3, [r7, #4]
 800100a:	f362 0341 	bfi	r3, r2, #1, #1
 800100e:	713b      	strb	r3, [r7, #4]
		irq_src.ERRI = ( ( SPI1->SR & (1<<4) ) >>4 );
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <SPI1_IRQHandler+0x54>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	091b      	lsrs	r3, r3, #4
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	b2da      	uxtb	r2, r3
 800101c:	793b      	ldrb	r3, [r7, #4]
 800101e:	f362 0382 	bfi	r3, r2, #2, #1
 8001022:	713b      	strb	r3, [r7, #4]

		Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack (irq_src);
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <SPI1_IRQHandler+0x58>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	7938      	ldrb	r0, [r7, #4]
 800102c:	4798      	blx	r3
	}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40013000 	.word	0x40013000
 800103c:	20000024 	.word	0x20000024

08001040 <SPI2_IRQHandler>:


	void SPI2_IRQHandler (void)
	{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
		struct S_IRQ_SRC irq_src;

		irq_src.TXE = ( ( SPI2->SR & (1<<1) ) >>1 );
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <SPI2_IRQHandler+0x54>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	085b      	lsrs	r3, r3, #1
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	b2da      	uxtb	r2, r3
 8001052:	793b      	ldrb	r3, [r7, #4]
 8001054:	f362 0300 	bfi	r3, r2, #0, #1
 8001058:	713b      	strb	r3, [r7, #4]
		irq_src.RXNE = ( ( SPI2->SR & (1<<0) ) >>0 );
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <SPI2_IRQHandler+0x54>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	b2da      	uxtb	r2, r3
 8001064:	793b      	ldrb	r3, [r7, #4]
 8001066:	f362 0341 	bfi	r3, r2, #1, #1
 800106a:	713b      	strb	r3, [r7, #4]
		irq_src.ERRI = ( ( SPI2->SR & (1<<4) ) >>4 );
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <SPI2_IRQHandler+0x54>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	091b      	lsrs	r3, r3, #4
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	b2da      	uxtb	r2, r3
 8001078:	793b      	ldrb	r3, [r7, #4]
 800107a:	f362 0382 	bfi	r3, r2, #2, #1
 800107e:	713b      	strb	r3, [r7, #4]

		Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack (irq_src);
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <SPI2_IRQHandler+0x58>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	7938      	ldrb	r0, [r7, #4]
 8001088:	4798      	blx	r3
	}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40003800 	.word	0x40003800
 8001098:	20000024 	.word	0x20000024

0800109c <USART1_IRQHandler>:


//ISR

void USART1_IRQHandler (void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 80010a0:	4b02      	ldr	r3, [pc, #8]	; (80010ac <USART1_IRQHandler+0x10>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	4798      	blx	r3
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	2000002c 	.word	0x2000002c

080010b0 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 80010b4:	4b02      	ldr	r3, [pc, #8]	; (80010c0 <USART2_IRQHandler+0x10>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	4798      	blx	r3
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	2000002c 	.word	0x2000002c

080010c4 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 80010c8:	4b02      	ldr	r3, [pc, #8]	; (80010d4 <USART3_IRQHandler+0x10>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	4798      	blx	r3
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	2000002c 	.word	0x2000002c

080010d8 <__libc_init_array>:
 80010d8:	b570      	push	{r4, r5, r6, lr}
 80010da:	2500      	movs	r5, #0
 80010dc:	4e0c      	ldr	r6, [pc, #48]	; (8001110 <__libc_init_array+0x38>)
 80010de:	4c0d      	ldr	r4, [pc, #52]	; (8001114 <__libc_init_array+0x3c>)
 80010e0:	1ba4      	subs	r4, r4, r6
 80010e2:	10a4      	asrs	r4, r4, #2
 80010e4:	42a5      	cmp	r5, r4
 80010e6:	d109      	bne.n	80010fc <__libc_init_array+0x24>
 80010e8:	f000 f81a 	bl	8001120 <_init>
 80010ec:	2500      	movs	r5, #0
 80010ee:	4e0a      	ldr	r6, [pc, #40]	; (8001118 <__libc_init_array+0x40>)
 80010f0:	4c0a      	ldr	r4, [pc, #40]	; (800111c <__libc_init_array+0x44>)
 80010f2:	1ba4      	subs	r4, r4, r6
 80010f4:	10a4      	asrs	r4, r4, #2
 80010f6:	42a5      	cmp	r5, r4
 80010f8:	d105      	bne.n	8001106 <__libc_init_array+0x2e>
 80010fa:	bd70      	pop	{r4, r5, r6, pc}
 80010fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001100:	4798      	blx	r3
 8001102:	3501      	adds	r5, #1
 8001104:	e7ee      	b.n	80010e4 <__libc_init_array+0xc>
 8001106:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800110a:	4798      	blx	r3
 800110c:	3501      	adds	r5, #1
 800110e:	e7f2      	b.n	80010f6 <__libc_init_array+0x1e>
 8001110:	08001164 	.word	0x08001164
 8001114:	08001164 	.word	0x08001164
 8001118:	08001164 	.word	0x08001164
 800111c:	08001168 	.word	0x08001168

08001120 <_init>:
 8001120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001122:	bf00      	nop
 8001124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001126:	bc08      	pop	{r3}
 8001128:	469e      	mov	lr, r3
 800112a:	4770      	bx	lr

0800112c <_fini>:
 800112c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800112e:	bf00      	nop
 8001130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001132:	bc08      	pop	{r3}
 8001134:	469e      	mov	lr, r3
 8001136:	4770      	bx	lr
