
setting_clock_frequency.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000214  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000344  0800034c  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000344  08000344  0001034c  2**0
                  CONTENTS
  4 .ARM          00000000  08000344  08000344  0001034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000344  0800034c  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000344  08000344  00010344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000348  08000348  00010348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800034c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800034c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000015e  00000000  00000000  00010375  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000096  00000000  00000000  000104d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  00010570  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  000105b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000010d3  00000000  00000000  000105e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000536  00000000  00000000  000116bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000470d  00000000  00000000  00011bf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000162fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  0001637c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800032c 	.word	0x0800032c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800032c 	.word	0x0800032c

08000170 <main>:
#include "stdint.h"
#include "RCC.h"
#include "GPIO.h"
int main()
{
 8000170:	b480      	push	{r7}
 8000172:	b087      	sub	sp, #28
 8000174:	af00      	add	r7, sp, #0
	//RCC_INIT
	/* ********************Note*************************:
	 * PLL Must be Configured First before Enabling it
	 * once a clk source is selected, you can't configure it.
	 * ***********************************************/
	RCC_PLLMUX_by_8();
 8000176:	f06f 0306 	mvn.w	r3, #6
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	4b3f      	ldr	r3, [pc, #252]	; (800027c <main+0x10c>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	4a3e      	ldr	r2, [pc, #248]	; (800027c <main+0x10c>)
 8000182:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 8000186:	6013      	str	r3, [r2, #0]
 8000188:	4b3c      	ldr	r3, [pc, #240]	; (800027c <main+0x10c>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	68fa      	ldr	r2, [r7, #12]
 800018e:	0492      	lsls	r2, r2, #18
 8000190:	43d2      	mvns	r2, r2
 8000192:	4611      	mov	r1, r2
 8000194:	4a39      	ldr	r2, [pc, #228]	; (800027c <main+0x10c>)
 8000196:	400b      	ands	r3, r1
 8000198:	6013      	str	r3, [r2, #0]
	RCC_Enable_PLL();
 800019a:	4b39      	ldr	r3, [pc, #228]	; (8000280 <main+0x110>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4a38      	ldr	r2, [pc, #224]	; (8000280 <main+0x110>)
 80001a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001a4:	6013      	str	r3, [r2, #0]
	RCC_select_PLL();
 80001a6:	f06f 0302 	mvn.w	r3, #2
 80001aa:	60bb      	str	r3, [r7, #8]
 80001ac:	4b33      	ldr	r3, [pc, #204]	; (800027c <main+0x10c>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a32      	ldr	r2, [pc, #200]	; (800027c <main+0x10c>)
 80001b2:	f043 0302 	orr.w	r3, r3, #2
 80001b6:	6013      	str	r3, [r2, #0]
 80001b8:	4b30      	ldr	r3, [pc, #192]	; (800027c <main+0x10c>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	68ba      	ldr	r2, [r7, #8]
 80001be:	43d2      	mvns	r2, r2
 80001c0:	4611      	mov	r1, r2
 80001c2:	4a2e      	ldr	r2, [pc, #184]	; (800027c <main+0x10c>)
 80001c4:	400b      	ands	r3, r1
 80001c6:	6013      	str	r3, [r2, #0]
	RCC_APB1_prescalar_by_2();
 80001c8:	f06f 0304 	mvn.w	r3, #4
 80001cc:	607b      	str	r3, [r7, #4]
 80001ce:	4b2b      	ldr	r3, [pc, #172]	; (800027c <main+0x10c>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a2a      	ldr	r2, [pc, #168]	; (800027c <main+0x10c>)
 80001d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001d8:	6013      	str	r3, [r2, #0]
 80001da:	4b28      	ldr	r3, [pc, #160]	; (800027c <main+0x10c>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	687a      	ldr	r2, [r7, #4]
 80001e0:	0212      	lsls	r2, r2, #8
 80001e2:	43d2      	mvns	r2, r2
 80001e4:	4611      	mov	r1, r2
 80001e6:	4a25      	ldr	r2, [pc, #148]	; (800027c <main+0x10c>)
 80001e8:	400b      	ands	r3, r1
 80001ea:	6013      	str	r3, [r2, #0]
	RCC_APB2_prescalar_by_2();
 80001ec:	f06f 0304 	mvn.w	r3, #4
 80001f0:	603b      	str	r3, [r7, #0]
 80001f2:	4b22      	ldr	r3, [pc, #136]	; (800027c <main+0x10c>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a21      	ldr	r2, [pc, #132]	; (800027c <main+0x10c>)
 80001f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001fc:	6013      	str	r3, [r2, #0]
 80001fe:	4b1f      	ldr	r3, [pc, #124]	; (800027c <main+0x10c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	683a      	ldr	r2, [r7, #0]
 8000204:	02d2      	lsls	r2, r2, #11
 8000206:	43d2      	mvns	r2, r2
 8000208:	4611      	mov	r1, r2
 800020a:	4a1c      	ldr	r2, [pc, #112]	; (800027c <main+0x10c>)
 800020c:	400b      	ands	r3, r1
 800020e:	6013      	str	r3, [r2, #0]
    //enable portA clock
    RCC_GPIOB_ENB();
 8000210:	4b1c      	ldr	r3, [pc, #112]	; (8000284 <main+0x114>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a1b      	ldr	r2, [pc, #108]	; (8000284 <main+0x114>)
 8000216:	f043 0310 	orr.w	r3, r3, #16
 800021a:	6013      	str	r3, [r2, #0]
    GPIOA_CRH &= 0xFF0FFFFF;
 800021c:	4b1a      	ldr	r3, [pc, #104]	; (8000288 <main+0x118>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a19      	ldr	r2, [pc, #100]	; (8000288 <main+0x118>)
 8000222:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000226:	6013      	str	r3, [r2, #0]
    GPIOA_CRH |= 0x00200000;
 8000228:	4b17      	ldr	r3, [pc, #92]	; (8000288 <main+0x118>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a16      	ldr	r2, [pc, #88]	; (8000288 <main+0x118>)
 800022e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000232:	6013      	str	r3, [r2, #0]
    while (1)
    {
        GPIOA_ODR |= 1<<13;
 8000234:	4b15      	ldr	r3, [pc, #84]	; (800028c <main+0x11c>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a14      	ldr	r2, [pc, #80]	; (800028c <main+0x11c>)
 800023a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800023e:	6013      	str	r3, [r2, #0]
        for (int i = 0 ; i < 5000 ; i++);
 8000240:	2300      	movs	r3, #0
 8000242:	617b      	str	r3, [r7, #20]
 8000244:	e002      	b.n	800024c <main+0xdc>
 8000246:	697b      	ldr	r3, [r7, #20]
 8000248:	3301      	adds	r3, #1
 800024a:	617b      	str	r3, [r7, #20]
 800024c:	697b      	ldr	r3, [r7, #20]
 800024e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000252:	4293      	cmp	r3, r2
 8000254:	ddf7      	ble.n	8000246 <main+0xd6>
        GPIOA_ODR &= ~(1<<13);
 8000256:	4b0d      	ldr	r3, [pc, #52]	; (800028c <main+0x11c>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4a0c      	ldr	r2, [pc, #48]	; (800028c <main+0x11c>)
 800025c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000260:	6013      	str	r3, [r2, #0]
        for (int i = 0 ; i < 5000 ; i++);
 8000262:	2300      	movs	r3, #0
 8000264:	613b      	str	r3, [r7, #16]
 8000266:	e002      	b.n	800026e <main+0xfe>
 8000268:	693b      	ldr	r3, [r7, #16]
 800026a:	3301      	adds	r3, #1
 800026c:	613b      	str	r3, [r7, #16]
 800026e:	693b      	ldr	r3, [r7, #16]
 8000270:	f241 3287 	movw	r2, #4999	; 0x1387
 8000274:	4293      	cmp	r3, r2
 8000276:	ddf7      	ble.n	8000268 <main+0xf8>
        GPIOA_ODR |= 1<<13;
 8000278:	e7dc      	b.n	8000234 <main+0xc4>
 800027a:	bf00      	nop
 800027c:	40021004 	.word	0x40021004
 8000280:	40021000 	.word	0x40021000
 8000284:	40021018 	.word	0x40021018
 8000288:	40010804 	.word	0x40010804
 800028c:	4001080c 	.word	0x4001080c

08000290 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000290:	480d      	ldr	r0, [pc, #52]	; (80002c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000292:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000294:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000298:	480c      	ldr	r0, [pc, #48]	; (80002cc <LoopForever+0x6>)
  ldr r1, =_edata
 800029a:	490d      	ldr	r1, [pc, #52]	; (80002d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800029c:	4a0d      	ldr	r2, [pc, #52]	; (80002d4 <LoopForever+0xe>)
  movs r3, #0
 800029e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a0:	e002      	b.n	80002a8 <LoopCopyDataInit>

080002a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a6:	3304      	adds	r3, #4

080002a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ac:	d3f9      	bcc.n	80002a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ae:	4a0a      	ldr	r2, [pc, #40]	; (80002d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b0:	4c0a      	ldr	r4, [pc, #40]	; (80002dc <LoopForever+0x16>)
  movs r3, #0
 80002b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b4:	e001      	b.n	80002ba <LoopFillZerobss>

080002b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b8:	3204      	adds	r2, #4

080002ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002bc:	d3fb      	bcc.n	80002b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002be:	f000 f811 	bl	80002e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002c2:	f7ff ff55 	bl	8000170 <main>

080002c6 <LoopForever>:

LoopForever:
    b LoopForever
 80002c6:	e7fe      	b.n	80002c6 <LoopForever>
  ldr   r0, =_estack
 80002c8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d4:	0800034c 	.word	0x0800034c
  ldr r2, =_sbss
 80002d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002dc:	2000001c 	.word	0x2000001c

080002e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e0:	e7fe      	b.n	80002e0 <ADC1_2_IRQHandler>
	...

080002e4 <__libc_init_array>:
 80002e4:	b570      	push	{r4, r5, r6, lr}
 80002e6:	2500      	movs	r5, #0
 80002e8:	4e0c      	ldr	r6, [pc, #48]	; (800031c <__libc_init_array+0x38>)
 80002ea:	4c0d      	ldr	r4, [pc, #52]	; (8000320 <__libc_init_array+0x3c>)
 80002ec:	1ba4      	subs	r4, r4, r6
 80002ee:	10a4      	asrs	r4, r4, #2
 80002f0:	42a5      	cmp	r5, r4
 80002f2:	d109      	bne.n	8000308 <__libc_init_array+0x24>
 80002f4:	f000 f81a 	bl	800032c <_init>
 80002f8:	2500      	movs	r5, #0
 80002fa:	4e0a      	ldr	r6, [pc, #40]	; (8000324 <__libc_init_array+0x40>)
 80002fc:	4c0a      	ldr	r4, [pc, #40]	; (8000328 <__libc_init_array+0x44>)
 80002fe:	1ba4      	subs	r4, r4, r6
 8000300:	10a4      	asrs	r4, r4, #2
 8000302:	42a5      	cmp	r5, r4
 8000304:	d105      	bne.n	8000312 <__libc_init_array+0x2e>
 8000306:	bd70      	pop	{r4, r5, r6, pc}
 8000308:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800030c:	4798      	blx	r3
 800030e:	3501      	adds	r5, #1
 8000310:	e7ee      	b.n	80002f0 <__libc_init_array+0xc>
 8000312:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000316:	4798      	blx	r3
 8000318:	3501      	adds	r5, #1
 800031a:	e7f2      	b.n	8000302 <__libc_init_array+0x1e>
 800031c:	08000344 	.word	0x08000344
 8000320:	08000344 	.word	0x08000344
 8000324:	08000344 	.word	0x08000344
 8000328:	08000348 	.word	0x08000348

0800032c <_init>:
 800032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032e:	bf00      	nop
 8000330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000332:	bc08      	pop	{r3}
 8000334:	469e      	mov	lr, r3
 8000336:	4770      	bx	lr

08000338 <_fini>:
 8000338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033a:	bf00      	nop
 800033c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033e:	bc08      	pop	{r3}
 8000340:	469e      	mov	lr, r3
 8000342:	4770      	bx	lr
